"Question","Answer","Tags"
"Commutative Laws #1: What does the Commutative Law state in Boolean algebra?","It states that the order of operands in an AND or an OR operation can be swapped without affecting the result.","nand2tetris:CommutativeLaws"
"Commutative Laws #2: Give the formula for the Commutative Law of AND using written notation.","x AND y = y AND x","nand2tetris:CommutativeLaws"
"Commutative Laws #3: Give the formula for the Commutative Law of OR using written notation.","x OR y = y OR x","nand2tetris:CommutativeLaws"
"Commutative Laws #4: Why is the Commutative Law important in Boolean simplification?","It allows us to rearrange variables when simplifying, making it easier to spot further simplifications or patterns.","nand2tetris:CommutativeLaws"
"Commutative Laws #5: Provide an example of the Commutative Law for AND using variables A and B.","A AND B = B AND A","nand2tetris:CommutativeLaws"
"Commutative Laws #6: Provide an example of the Commutative Law for OR using variables P and Q.","P OR Q = Q OR P","nand2tetris:CommutativeLaws"
"Commutative Laws #7: True or False: Swapping the order of variables in a Boolean expression changes the output.","False. By the Commutative Law, the output remains the same.","nand2tetris:CommutativeLaws"
"Commutative Laws #8: In practical terms, how can the Commutative Law help when drawing logic gate diagrams?","It allows reordering inputs to gates without affecting the overall logic, making circuit layouts more flexible.","nand2tetris:CommutativeLaws"
"Commutative Laws #9: When might you use the Commutative Law in Boolean algebra proofs?","Whenever you want to reorder terms to align with a standard form or to combine like terms in further simplification steps.","nand2tetris:CommutativeLaws"
"Commutative Laws #10: Does the Commutative Law apply to subtraction or division in ordinary arithmetic?","No. It applies to addition and multiplication in standard arithmetic, but not to subtraction or division. In Boolean algebra, it applies to AND and OR.","nand2tetris:CommutativeLaws"

"Associative Laws #1: What does the Associative Law state in Boolean algebra?","It states that the grouping of operands in consecutive AND or OR operations does not affect the final result.","nand2tetris:AssociativeLaws"
"Associative Laws #2: Give the formula for the Associative Law of AND in written notation.","x AND (y AND z) = (x AND y) AND z","nand2tetris:AssociativeLaws"
"Associative Laws #3: Give the formula for the Associative Law of OR in written notation.","x OR (y OR z) = (x OR y) OR z","nand2tetris:AssociativeLaws"
"Associative Laws #4: Why does the Associative Law simplify Boolean expression parsing?","Because you can omit or shift parentheses in chains of ANDs or ORs without changing the result, making expressions easier to read and simplify.","nand2tetris:AssociativeLaws"
"Associative Laws #5: Provide a real-world analogy for the Associative Law.","Just as in arithmetic, (2 + (3 + 4)) = ((2 + 3) + 4). Grouping additions (or Boolean operations) differently does not change the final result.","nand2tetris:AssociativeLaws"
"Associative Laws #6: Show an example of the Associative Law for AND with variables A, B, C.","A AND (B AND C) = (A AND B) AND C","nand2tetris:AssociativeLaws"
"Associative Laws #7: Show an example of the Associative Law for OR with variables X, Y, Z.","X OR (Y OR Z) = (X OR Y) OR Z","nand2tetris:AssociativeLaws"
"Associative Laws #8: In logic gates, what does the Associative Law imply?","If you have multiple AND or OR gates in series, you can regroup them without changing the output.","nand2tetris:AssociativeLaws"
"Associative Laws #9: Does the Associative Law allow mixing AND and OR interchangeably?","No. It applies to chains of AND operations or chains of OR operations separately, but does not let you swap AND with OR.","nand2tetris:AssociativeLaws"
"Associative Laws #10: True or False: (x OR y) OR z is different from x OR (y OR z) in terms of output.","False. By the Associative Law, they are equivalent.","nand2tetris:AssociativeLaws"

"Distributive Laws #1: State the Distributive Law of AND over OR in written notation.","x AND (y OR z) = (x AND y) OR (x AND z)","nand2tetris:DistributiveLaws"
"Distributive Laws #2: State the Distributive Law of OR over AND in written notation.","x OR (y AND z) = (x OR y) AND (x OR z)","nand2tetris:DistributiveLaws"
"Distributive Laws #3: How is the Distributive Law in Boolean algebra similar to arithmetic?","It mirrors the arithmetic property a×(b+c) = a×b + a×c, but uses AND/OR in place of multiplication/addition.","nand2tetris:DistributiveLaws"
"Distributive Laws #4: Give an example distributing AND over OR with variables A, B, C.","A AND (B OR C) = (A AND B) OR (A AND C)","nand2tetris:DistributiveLaws"
"Distributive Laws #5: Provide a scenario where the Distributive Law helps simplify a Boolean expression.","Example: X AND (X OR Y) distributes to (X AND X) OR (X AND Y), which simplifies to X.","nand2tetris:DistributiveLaws"
"Distributive Laws #6: True or False: (x AND y) OR (x AND z) is always the same as x AND (y OR z).","True. They are equivalent by the Distributive Law.","nand2tetris:DistributiveLaws"
"Distributive Laws #7: True or False: (x OR y) AND (x OR z) is always the same as x OR (y AND z).","True. They are also equivalent by the Distributive Law.","nand2tetris:DistributiveLaws"
"Distributive Laws #8: How does the Distributive Law help in factorization of Boolean expressions?","It allows you to factor out a common variable from an OR or an AND, just like algebraic factorization.","nand2tetris:DistributiveLaws"
"Distributive Laws #9: Why might the Distributive Law be useful for designing digital circuits?","It helps rearrange logic gates to reduce gate count or wiring complexity, thus optimizing circuit design.","nand2tetris:DistributiveLaws"
"Distributive Laws #10: Fill in the blank: x OR (y AND z) = (x OR y) AND (___ OR z).","x","nand2tetris:DistributiveLaws"

"De Morgan’s Laws #1: State the first De Morgan’s Law in written notation.","NOT(x AND y) = (NOT x) OR (NOT y)","nand2tetris:DeMorgansLaws"
"De Morgan’s Laws #2: State the second De Morgan’s Law in written notation.","NOT(x OR y) = (NOT x) AND (NOT y)","nand2tetris:DeMorgansLaws"
"De Morgan’s Laws #3: In words, what do De Morgan’s Laws say?","If you negate an AND expression, it becomes the OR of the negated variables. If you negate an OR expression, it becomes the AND of the negated variables.","nand2tetris:DeMorgansLaws"
"De Morgan’s Laws #4: True or False: NOT(x AND y) = (NOT x) AND (NOT y).","False. De Morgan’s says NOT(x AND y) = (NOT x) OR (NOT y).","nand2tetris:DeMorgansLaws"
"De Morgan’s Laws #5: Convert NOT(x OR z) using De Morgan’s Law.","(NOT x) AND (NOT z)","nand2tetris:DeMorgansLaws"
"De Morgan’s Laws #6: How can De Morgan’s Laws simplify circuit design?","They allow OR gates with inverted inputs to be replaced by NAND gates, or AND gates with inverted inputs to be replaced by NOR gates.","nand2tetris:DeMorgansLaws"
"De Morgan’s Laws #7: Which operators are swapped when applying De Morgan’s Laws?","AND becomes OR, OR becomes AND, while each variable is negated.","nand2tetris:DeMorgansLaws"
"De Morgan’s Laws #8: Give a real-world analogy for De Morgan’s Laws.","If it's not true that both traffic lights are green, then at least one is not green. If it's not true that either light is green, then both are not green.","nand2tetris:DeMorgansLaws"
"De Morgan’s Laws #9: Use De Morgan’s Law on NOT(A OR (B AND C)).","It becomes (NOT A) AND (NOT (B AND C)), which expands to (NOT A) AND ((NOT B) OR (NOT C)).","nand2tetris:DeMorgansLaws"
"De Morgan’s Laws #10: What is the main benefit of using De Morgan’s Laws in Boolean expressions?","They allow you to move negations inside parentheses and switch AND/OR, often simplifying or transforming expressions and circuit designs.","nand2tetris:DeMorgansLaws"
"DNF #1: What is Disjunctive Normal Form in Boolean algebra?","Disjunctive Normal Form (DNF) is a canonical representation where a formula is written as a disjunction (OR) of one or more conjunctions (AND) of literals (variables or their negations).","nand2tetris:DNF"
"DNF #2: How can any truth table be converted into a DNF?","For each row in the truth table that evaluates to TRUE, form a conjunction of literals matching that row's variable values or negations, and then combine all these conjunctions with OR.","nand2tetris:DNF"
"DNF #3: Why is DNF considered a canonical form?","Because every Boolean expression can be systematically rewritten in DNF, making it a standard way to represent any Boolean function.","nand2tetris:DNF"
"DNF #4: What does an 'elementary conjunction' in DNF consist of?","It is a set of one or more literals (each variable or its negation) combined with AND, representing a single row of the truth table where the function is TRUE.","nand2tetris:DNF"
"DNF #5: Which basic logical operators are typically seen in a DNF expression?","A DNF expression uses OR to join multiple AND-clauses, where each AND-clause can contain variables or their negations (NOT).","nand2tetris:DNF"

"Functional Completeness #1: Which basic operators are sufficient to express any Boolean function?","AND, OR, and NOT are functionally complete, meaning any Boolean function can be built from these three.","nand2tetris:FunctionalCompleteness"
"Functional Completeness #2: Can any Boolean formula be expressed using only AND and NOT?","Yes. AND and NOT together form a functionally complete set, so OR can be derived if needed.","nand2tetris:FunctionalCompleteness"
"Functional Completeness #3: Is NAND alone enough to express any Boolean formula?","Yes. NAND is also functionally complete; every Boolean function can be implemented with NAND gates only.","nand2tetris:FunctionalCompleteness"
"Functional Completeness #4: How do you represent NOT(x) using only NAND gates?","NOT(x) can be written as x NAND x.","nand2tetris:FunctionalCompleteness"
"Functional Completeness #5: How do you represent AND(x,y) and OR(x,y) using only NAND gates?","AND(x,y) = (x NAND y) NAND (x NAND y).  OR(x,y) = (x NAND x) NAND (y NAND y).","nand2tetris:FunctionalCompleteness""Buses #1: What is a bus in hardware design?","A bus is a group of bits treated as a single multi-bit signal, letting you manipulate many bits together as one logical entity.","nand2tetris:Buses"
"Buses #2: How are multi-bit inputs and outputs defined in Hack HDL?","They use bracket notation (e.g., 'in[16]' or 'out[16]') to indicate the number of bits, similar to array syntax in programming.","nand2tetris:Buses"
"Buses #3: How do we access or manipulate individual bits within a bus in Hack HDL?","Use an index in brackets (e.g., 'in[0]') to refer to a specific bit, or a range (e.g., 'in[7..0]') for a sub-bus.","nand2tetris:Buses"
"Buses #4: What are multi-way gates and why are they useful?","They are gates (e.g., And4Way) that operate on several bits in parallel, letting you combine or process multiple inputs in one step.","nand2tetris:Buses"

"Buses #5: What does it mean to have overlapping sub-buses in Hack HDL?","It means you can define multiple sub-ranges of the same bus that overlap each other, allowing different segments of the bus to be accessed or reused in various ways.","nand2tetris:Buses"
"Buses #6: How are internal bus widths deduced in Hack HDL?","Internal pins get their width automatically from whatever bus is connected to them. There's no need to explicitly declare their width.","nand2tetris:Buses"
"Buses #7: How can you fill an entire bus with 0s or 1s in Hack HDL?","You can connect a bus to 'false' (all bits = 0) or 'true' (all bits = 1) using these built-in HDL constants.","nand2tetris:Buses"
"Buses #8: How do you specify sub-ranges using the 'dot dot' notation in Hack HDL?","Write something like 'out[7..0]' to refer to bits 7 down through 0. For example, 'out[15..8]' and 'out[7..0]' can split a 16-bit bus into two 8-bit halves.","nand2tetris:Buses"